#!vivado_hls -f
#
# Dev project script
#
# If environment variable ARGV is set then options are
# determined from tokens. Currently supported are NORESET,
# NOSIM, NOSYNTH, NOCOSIM, NOEXPORT, and -version=#.#. By default, we
# do everything.

# change to directory containing script
cd [file dirname [info script]]
pwd

# aids & conveniences
proc header args {puts [exec ../bin/header -cpp -cols=80 $args]}
proc quit {} {exit}
proc parse_options {} {
  # Parses the environment variable ARGV for command-line options
  # to get past tool retrictions. Options are placed into associative
  # array OPT(key). If a value is supplied, $OPT(key) provides it.
  puts "Parsing command-line options"
  global env OPT
  foreach arg [split $env(ARGV)] {
    if {$arg == "--"} continue
    if {[regexp {^-?(-[[:alnum:]_]+)=(.*)} $arg -> opt val]} {
    } elseif {[regexp {^-?(-[[:alnum:]_]+)} $arg -> opt]} {
      set val ""
    } else {
      set opt $arg
      set val ""
    }
    set OPT($opt) $val
  }
  if {[array size OPT] != 0} {
    puts "Options from environment ARGV:"
    foreach opt [lsort [array names OPT]] {
      set val ""
      if {$OPT($opt) != ""} {set val "=$OPT($opt)"}
      puts [format "    %s%s" $opt $val]
    }
  }
}
proc has opt {
  # Tests to see if an option is present
  global OPT
  info exists OPT($opt)
}

parse_options

# Find path to source code
set src "[exec realpath ./src ../src ../../src ../../../src]"

if {[info exists env(TESTSCRIPT)]} {
  puts "INFO: Terminating test of script"
  quit
}

header SETUP
if {[has NORESET]} {
  open_project mtxdev
} else {
  open_project -reset mtxdev
}
set_top dev_hls

# Design
add_files $src/dev_hls.cpp

# Testbench
add_files -tb $src/command.cpp
add_files -tb $src/dev_test.cpp
add_files -tb $src/dev_util.cpp
add_files -tb $src/matrix.cpp
add_files -tb $src/memory.cpp
add_files -tb $src/registers.cpp

# ************CUSTOMIZE SOLUTIONS BELOW HERE************
# zedboard
if {[has -part]} {
  set part $OPT(-part)
} else {
  set part {xc7z020clg484-1}
}
if {[has -period]} {
  set period $OPT(-period)
} else {
  set period 16
}
if {[has -uncertainty]} {
  set uncertainty $OPT(-uncertainty)
} else {
  set uncertainty 5
}
# names from following array are used foreach solutions
set constraints(solution1) {}
# ************CUSTOMIZE SOLUTIONS ABOVE HERE************

foreach solution [array names constraints] {
  header $solution
  # Basic constraints
  if {[has NORESET]} {
    open_solution $solution
  } else {
    open_solution -reset $solution
  }
  set_part $part
  create_clock -period $period -name default
  set_clock_uncertainty $uncertainty

  # Directives
  if {$constraints($solution) != ""} {
    eval $constraints($solution)
  }

  if {[file exists loop_constraints.tcl]} {
    source loop_constraints.tcl
  }

  if {![has NOSIM]} {
    header SIMULATE
    csim_design -clean
  }

  if {![has NOSYNTH]} {
    header SYNTHESIZE
    csynth_design
  }

  if {![has NOCOSIM]} {
    header COSIM
    cosim_design -trace_level none
  }

  if {![has NOEXPORT]} {
    header EXPORT
    if {[has -version]} {
      set vers $OPT(-version)
    } else {
      set vers 1.1
    }
    export_design -format ip_catalog -description "An IP generated by Vivado HLS" -vendor "xilinx.com" -library "hls" -version $vers
    header VERSION $vers
  }
}

header FINISHED

exit
