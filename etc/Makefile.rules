#!/bin/make -f
# -*- make -*- vim:syntax=make:fdm=marker:fmr=<<<,>>>:tw=80:sw=2:et
# Find path to THIS file
MAKEFILE_RULES := $(realpath $(lastword $(MAKEFILE_LIST)))
# Header guard -- don't include more than once
ifndef INCLUDED_MAKEFILE_RULES
INCLUDED_MAKEFILE_RULES=1
$(info INFO: $$ Makefile.rules,v 1.1 2012/09/01 05:26:56 dcblack Exp $$)
################################################################################
# $License: Apache 2.0 $
#
# This file is licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################################
define MAKEFILE_DOCUMENTATION

#######################################################################
#                                                                     #
#   ---->>     To read this use: perldoc Makefile.rules    <<----     #
#                                                                     #
#######################################################################

=pod

=head1 NAME

B<Makefile.rules> - Generic SystemC makefile rules

=head1 SYNOPSIS

B<make -f Makefile.rules> UNIT={:NAME:} SRCS={:LIST:} {:TARGET:}

or if #included from a Makefile

B<make> [{:TARGET:}]

NOTE - Some local installations of GNU make rename it to B<gmake>.

=head1 DESCRIPTION

This file, Makefile.rules, contains rules for compiling  and running
SystemC under UNIX using gcc. It has a variety of pseudo-targets
(targets that do not correspond directly to creation of a like named
file).

=head1 USAGE

The following targets are available:

=over

=item B<help>

Displays this documentation

=item B<objs>

Makes all the object files (typically files that end in B<.o>)

=item B<lib>

TBD - this is an undocumented area

=item B<exe>

Makes the executable (typically ends in B<.x>)

=item B<run>

Creates and runs the executable.

=item B<gdb>

Create the executable and invokes the B<gdb> debugger on it.

=item B<ddd>

Create the executable and invoke the B<ddd> debugger on it.

=item B<deps>

Creates the dependencies file (typically dependencies.mk)

=item B<dist>

Attempts to create a tar'able distribution file with all the necessary
parts. This includes pulling in a copy of Makefile.rules and Makefile.macros.

=item B<rmdeps>

Removes the dependencies file.

=item B<rmdist>

Removes things that can be found in standard locations. Effectively undoes
the B<dist> target.

=item B<show>

Displays some internal variables/macros.

=item B<tar>

Creates a tarball consisting of all the source files, makefile and scripts.

=item B<clean>

Removes generated objects, dependency, executable and core dumps.

=item B<ultraclean>

In addition to clean, removes waveforms and other intermediates.

=item B<distclean>

In addition to ultraclean, removes all log files, and things not part
of the distribution.

=item B<version>

Displays the version of GCC and SystemC.

=item B<html>

Runs doxygen to generate help in HTML (web page) format.

=item B<pdf>

Runs doxygen to generate help in PDF format.

=item B<gprof>

Runs the GNU Profiler.

=item B<gcov>

Runs the GNU Coverage tool.

=back

You will likely wish to set the following variables:

=over

=item *

B<PROJ_HOME> points to the project home directory.
You must define it.

=item *

B<UNIT>, establishes the basename for the executable

=item *

B<SRCS>, a list of source files (.cpp) to be compiled

=item *

B<BOOST_LIBS>, an optional list of boost libraries you use.
Specified I<without> the B<-lboost_> prefix.

=item *

B<BOOST_HOME> points to the directory where boost is installed. 
It is assumed that the following hierarchy exists:

  ${BOOST_HOME}/
  +- include/
  |  +- boost/
  +- lib/

=back

The following are optional:

=over

=item B<MY_CDEFS>

May contain arbitrary preprocessor definitions of the
for B<-D>I<NAME> with an optionally appended value B<=>I<VALUE>.

=item B<MY_CFLAGS>

May contain arbitrary compiler options.

=item B<MY_LDFLAGS>

May contain arbitrary linker options (flags).

=item B<MY_INCDIRS>

May contain B<-I>I<DIRECTORY> include directory specifications.

=item B<MY_LIBDIRS>

May contain B<-I>L<DIRECTORY> library directory specifications.

=item B<MY_LIBS>

May contain B<-l>I<LIBNAME> library specifications.

=back

=head1 ENVIRONMENT

Assumes GNU make.

B<SYSTEMC> or B<SYSTEMC_HOME> environment variable set properly (points to
installation of SystemC).

=head1 DEPENDENCIES

There is a presumption that ${MAKEFILE_SCRIPTS} defined in Makefile.macros
contains a list of all local scripts used by this makefile engine.
At time of writing these include:

=over

gcc_version, includes, parents, systemc_version, unique_list

=back

Additionally, ${MAKEFILE_BINS} describes opensource and binary dependencies not
written by myself.
At time of writing these include:

=over

perl, modulecmd (derived from the Sourceforge modules package), wx-config (if
you define USING_WXWIDGETS), plus standard cat, ln, pwd, test and uname.

=back

=head1 EXAMPLES

Given Makefile containing:

 +---------------------------------------------------------------------
 |#!gmake -f
 |# Assumes GNU make version 3.8 or better
 |
 |UNIT:=example
 |SRCS:=subroutine.cpp main.cpp
 |
 |#--------------------------------------------------------------------
 |# *** DO NOT EDIT BELOW THIS LINE *** DO NOT EDIT BELOW THIS LINE ***
 |#--------------------------------------------------------------------
 |# The following locates the closest definition file containing the
 |# make rules that are used to compile designs anywhere here or above
 |# to three levels or in the ${HLDW}/etc directory..
 |ifndef EDA
 |  $(info INFO: Defining EDA)
 |  export EDA:=$(firstword $(wildcard ./eda ../eda ${HOME}/eda /eda))
 |endif
 |ifndef HLDW
 | ifdef HLDW
 |  $(info Defining HLDW)
 |  HLDW:=${HLDW}
 | else
 |  HLDW:=$(firstword $(wildcard $EDA/hldw/default $EDA/util/default))
 | endif
 | export HLDW
 |endif
 |# Allow for overrides locally, but normally use ${HLDW}/etc
 |RULEDIRS:= . .. ../.. ../../.. ../../../.. ${HLDW}/etc
 |RULES := $(addsuffix /etc/Makefile.rules,${RULEDIRS})
 |RULES += $(addsuffix /Makefile.rules,${RULEDIRS})
 |RULES := $(firstword $(wildcard ${RULES}))
 |$(info INFO: Including ${RULES})
 |include ${RULES}
 +---------------------------------------------------------------------

B<gmake> -f Makefile.rules

B<gmake> SRCS="top.cpp main.cpp" UNIT=mycode

=head1 AUTHOR

David C Black <dcblack@hldwizard.com>

=cut

endef

################################################################################
# INTERNAL NOTES
#-------------------------------------------------------------------------------
# WARNING: Not all the rules herein are fully tested/debugged
#
# This makefile contains a lot of automation and expects syntax according to GNU
# make 3.82 or better.
#
# By convention, I use ${VAR} to indicate variables; whereas, $(NAME ARGS) is
# used for functions (e.g. $(info Message)).
#-------------------------------------------------------------------------------


.PHONY: default help selftest envv obj compile objs lib link exe run debug gdb ddd deps rmdeps tar  \
        install dist rmdist sweep clean ultraclean distclean version\
        sim simulation html pdf lns gprof gcov show

ifndef EDA
 $(info INFO: Defining EDA)
 export EDA:=$(firstword $(wildcard ./eda ../eda ${HOME}/eda /eda))
endif
ifndef HLDW
 HLDW:=$(firstword $(wildcard $EDA/hldw/default $EDA/util/default))
 export HLDW
endif

# Locate macros - should be in same directory as rules
MACROS := $(addsuffix /Makefile.macros,$(dir ${MAKEFILE_RULES}))
ifeq "$(wildcard ${MACROS})" ""
$(error ERROR: Unable to find Makefile.macros needed by Makefile.rules)
else
$(info INFO: Including $(realpath ${MACROS}))
include ${MACROS}
endif

ifndef SHARED_DIR
  SHARED_DIR:=$(firstword $(wildcard $(addsuffix /shared,. $(call Parents,${PWD}) $(PROJ_HOME))))
endif
ifndef SHARED_BIN
  ifdef SHARED_DIR
    SHARED_BIN:=$(SHARED_DIR)/bin
  endif
endif
$(call Report_debug,SHARED_DIR)

# Standard locations for include directories
export INCLUDE_DIRECTORY_LOCATIONS:=. ../include ../includes ../inc ../incs
# Standard locations for source directories
export SOURCE_DIRECTORY_LOCATIONS:=. ../src ../srcs ../source ../sources
# Standard extensions
export SOURCE_EXTENSIONS:=cpp cxx cc c

################################################################################
# Determine defaults for some variables <<<
################################################################################
C_DEFS:=${MY_CDEFS}
CFLAGS:=${MY_CFLAGS}

ifdef MODULE
  # Backwards compatibility
  UNIT:=${UNIT:}
  MODULE:=
  unexport MODULE
endif
ifndef UNIT
  UNIT:=$(notdir $(patsubst %/,%,${PWD}))
  $(info INFO: Using directory name '${UNIT}' for UNIT)
endif
ifeq "${SRCS}" "{:SRCS:}"
  $(error You must replace {:SRCS:} in Makefile with a list of source files)
endif
ifeq "${SRCS}" ""
  override SRCS := $(wildcard \
                     $(foreach l,. ..,\
                       $(foreach d,${SOURCE_DIRECTORY_LOCATIONS},\
                         $(foreach e,${SOURCE_EXTENSIONS},$l/$d/*/$e)\
                        )\
                      )\
                    )
  $(warning Wildcarding files for SRCS yields '${SRCS}')
endif
override SRCS:=$(foreach s,${SRCS},$(if $(wildcard $s),$s,$(if $(wildcard ../src/$s),../src/$s,$s)))
SRC_MISSING:=$(foreach s,${SRCS},$(if $(wildcard $s),,$s))
SRC_NAMES:=$(filter-out %.cpp %.c %.hpp %.h,${SRC_MISSING})
SRC_MISSING:=$(filter-out ${SRC_NAMES},${SRC_MISSING})
SRC_DIRS:=$(call Get_dirs,${SRCS})
SRC_FILES:=$(call Get_notdirs,$(wildcard ${SRCS}))
$(call Report_debug,SRCS SRC_NAMES SRC_FILES SRC_DIRS SRC_MISSING)
ifneq "$(SRC_MISSING)" ""
  $(warning WARNING: Missing files!)
endif
ifeq "$(wildcard ${SRC_FILES} ${SRC_DIRS})" ""
  $(error ERROR: No source files found (SRCS)!?)
endif

################################################################################
ifdef SHARED
  SHARED_DIRS:=$(realpath $(call Get_dirs,${SHARED} ${SHARED_DIR}))
  SHARED_FILE:=$(call Get_notdirs,${SHARED})
endif
ifdef SHARED_DIRS
  SHARED_INCS:=$(wildcard $(addsuffix /include,${SHARED_DIRS}))
endif
ifdef SHARED_FILE
  $(info Examining shared files)
  SHARED_SRCS:=$(wildcard $(foreach dir,${SHARED_DIRS},$(foreach sdir,/ /src/,$(addprefix ${dir}${sdir},${SHARED_FILE}))))
# remove duplicates
  SHARED_SRCS:=$(sort $(realpath ${SHARED_SRCS}))
  SHARED_INCS+=$(realpath $(wildcard $(foreach sdir,/. /include,$(addsuffix ${sdir},$(dir ${SHARED_SRCS})))))
# SHARED_LIBS:=$(wildcard $(addsuffix /lib,$(dir $(dir ${SHARED_SRCS}))))
# SHARED_libs:=$(addprefix -l,$(notdir ${SHARED_SRCS}))
# # TODO:need to match libs against LIBS
# SHARED_libs:=$(addprefix -l,${SHARED_libs})
endif
$(call Report_debug,SHARED_DIRS SHARED_FILE SHARED_INCS SHARED_SRCS)
################################################################################

# Find unmentioned header files
HDRS+=${SRCS} ${SHARED_SRCS}
HDRS:=$(patsubst %.cpp,%.h,${HDRS})
HDRS:=$(patsubst %.cxx,%.h,${HDRS})
HDRS:=$(patsubst %.cc, %.h,${HDRS})
HDRS:=$(patsubst %.c,  %.h,${HDRS})
HDRS+=$(patsubst %.h,%.hpp,${HDRS})
ifneq "${INCLUDES_PGM}" ""
HDRS+=$(shell ${INCLUDES_PGM} ${SRCS} ${HDRS})
endif
HDRS:=$(sort ${HDRS})
HDRS:=$(wildcard ${HDRS} $(addprefix ../include/,${HDRS}))

# Figure out filenames for objects
ifndef OBJS
  OBJS:=${SRCS}
  OBJS:=$(patsubst %.cpp,%.o,${OBJS})
  OBJS:=$(patsubst %.cxx,%.o,${OBJS})
  OBJS:=$(patsubst %.cc, %.o,${OBJS})
  OBJS:=$(patsubst %.c,  %.o,${OBJS})
endif
SHARED_OBJS := ${SHARED_SRCS}
SHARED_OBJS := $(patsubst %.cpp,%.o,${SHARED_OBJS})
SHARED_OBJS := $(patsubst %.cxx,%.o,${SHARED_OBJS})
SHARED_OBJS := $(patsubst %.cc, %.o,${SHARED_OBJS})
SHARED_OBJS := $(patsubst %.c,  %.o,${SHARED_OBJS})
ifdef OBJFLAVOR
  OBJS:=$(patsubst %.o,%${OBJFLAVOR}.o,${OBJS})
  SHARED_OBJS:=$(patsubst %.o,%${OBJFLAVOR}.o,${SHARED_OBJS})
endif
# Stuff for libraries
ifdef LIBSRCS
  LIBOBJS := $(SRCS:.cpp=.o)
  LIBOBJS:=$(patsubst %.c,  %.o,${SRCS})
  LIBOBJS:=$(patsubst %.cc, %.o,${LIBOBJS})
  LIBOBJS:=$(patsubst %.cpp,%.o,${LIBOBJS})
  LIBOBJS:=$(patsubst %.cxx,%.o,${LIBOBJS})
  ifdef OBJFLAVOR
    LIBOBJS:=$(patsubst %.o,%${OBJFLAVOR}.o,${LIBOBJS})
  endif
endif
ifndef OBJDIR
  OBJDIR:=.
endif
ifndef NODEPS
  FOBS := ${OBJS}
else
  FOBS := $(addprefix ${OBJDIR}/,$(notdir ${OBJS}))
endif
ifndef LIBDIR
  LIBDIR:=../lib-${TARGET_ARCH}
endif
ifneq "$(wildcard ${HLDW}/hldw)" ""
  EA:=hldw
else
  EA:=ea
endif
ifndef LIBFILE
  LIBFILE:=lib${EA}
endif

USING_SYSTEMC:=
USING_CXX11:=
USING_SCV:=
USING_TLM:=
USING_FX:=
USING_DYNAMIC:=
USING_BOOST:=
USING_BLITZ:=
USING_WXWIDGETS:=
#USING_HLDW:=
#USING_CLEARCASE:=
USING_CLANG:=
USING_DOULOS:=

################################################################################
# Test for features within source code
#-------------------------------------------------------------------------------
ifneq "$(wildcard ${SRCS} ${SHARED_SRCS})" ""
 $(info INFO: Examining source files)
 #------------------------------------------------------------------------------
 ifndef NOT_CXX11
 ifneq "$(strip $(call File_contains,nullptr|unique_ptr|(?:<memory|thread|random>),${SRCS} ${SHARED_SRCS}))" ""
  USING_CXX11:=1
 endif
 ifneq "$(strip $(call File_contains,201103L|([/= ]c[+][+]11),${SRCS} ${SHARED_SRCS}))" ""
  USING_CXX11:=1
 endif
 ifeq "${GCC_VERSION}" "4.7"
  USING_CXX11:=1
 endif
 ifeq (${USING_CXX11},1)
  $(info INFO: Using C++11)
 endif
 endif
 #------------------------------------------------------------------------------
 ifndef NOT_SYSTEMC
 ifneq "$(strip $(call File_contains,systemc|\bsc_,${SRCS} ${SHARED_SRCS}))" ""
  USING_SYSTEMC:=1
  $(info INFO: Using SystemC)
  ifndef SYSTEMC
    # NOTE: In the following SYSTEMC_HOME is purely for certain EDA tools that
    # use a different convention for identifying the location of SystemC
    # includes & libraries.
    ifdef SYSTEMC_HOME
      export SYSTEMC:=${SYSTEMC_HOME}
    else
      $(error The SYSTEMC environment variable is not set)
    endif
  endif
  ifndef SYSTEMC_HOME
    export SYSTEMC_HOME:=${SYSTEMC}
  endif
  #$(call Report_debug,SYSTEMC_VERSION_PGM)
  SYSTEMC_VERSION:=$(shell ${SYSTEMC_VERSION_PGM} -D)
  SYSTEMC_VERSION_INT:=$(shell ${SYSTEMC_VERSION_PGM} -int)
  SYSTEMC_FULL:=$(shell ${SYSTEMC_VERSION_PGM})-gcc${GCC_VERSION}
  $(info INFO: Using ${SYSTEMC_VERSION} library)
 endif
 ifneq "$(strip $(call File_contains,scv_,${SRCS} ${SHARED_SRCS}))" ""
  USING_SCV:=1
  $(info INFO: Using SCV library)
 endif
 ifneq "$(strip $(call File_contains,TLM|tlm_|tlm.h,${SRCS} ${SHARED_SRCS}))" ""
  USING_TLM:=1
  $(info INFO: Using TLM library)
 endif
 ifneq "$(strip $(call File_contains,sc_fix|sc_ufix,${SRCS} ${SHARED_SRCS}))" ""
  USING_FX:=1
  $(info INFO: Using sc_fix types library)
 endif
 ifneq "$(strip $(call File_contains,tlm|sc_spawn|SC_FORK|simple_\w+_socket,${SRCS} ${SHARED_SRCS}))" ""
   USING_DYNAMIC:=1
   $(info INFO: Using dynamic processes library)
 endif
 endif
 #------------------------------------------------------------------------------
 ifndef NOT_BLITZ
 ifneq "$(strip $(call File_contains,blitz/,${SRCS} ${SHARED_SRCS}))" ""
   USING_BLITZ:=1
   $(info INFO: Using BLITZ library)
 endif
 endif
 #------------------------------------------------------------------------------
 ifndef NOT_BOOST
 ifneq "$(strip $(call File_contains,boost/,${SRCS} ${SHARED_SRCS}))" ""
   USING_BOOST:=1
   $(info INFO: Using BOOST library)
 endif
 endif
 #------------------------------------------------------------------------------
 ifndef NOT_WXWIDGETS
 ifneq "$(strip $(call File_contains,wx.h,${SRCS} ${SHARED_SRCS}))" ""
  USING_WXWIDGETS:=1
  $(info INFO: Using wxWidgets library)
 endif
 endif
 #------------------------------------------------------------------------------
#ifneq "$(strip $(call File_contains,${EA}_,${SRCS} ${SHARED_SRCS}))" ""
# USING_HLDW:=1
# $(info INFO: Using HLDW library)
#endif
endif
################################################################################
ifndef LIBPATH
 ifeq (${USING_SYSTEMC},1)
  ifdef NC_SYSTEMC
    LIBPATH:=${LIBDIR}/${LIBFILE}-${SYSTEMC_FULL}-cds.a
  else
   ifdef VSIMSACFG
    LIBPATH:=${LIBDIR}/${LIBFILE}-${SYSTEMC_FULL}-aldec.a
   else
    LIBPATH:=${LIBDIR}/${LIBFILE}-${SYSTEMC_FULL}-osci.a
   endif
  endif
 endif
endif
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ifeq (${USING_SYSTEMC},1)
  ifeq "${PLATFORM}" "CYGWIN_NT-5.1"
    SCV_DLL := ${SYSTEMC}/lib-cygwin/libscv.dll
  endif
endif

ifdef LIBOBJS
  LIBMBRS := $(patsubst %,${LIBPATH}(%),${LIBOBJS})
endif

ifndef DEPENDENCIES_FILE
  DEPENDENCIES_FILE := ${UNIT}${OBJFLAVOR}.deps
endif

.PRECIOUS: ${DEPENDENCIES_FILE} ${SHARED_OBJS} ${OBJS} ${EXE}

#ifeq "$(shell in_clearcase_dir -v)" "Yes"
#  USING_CLEARCASE:=1
#endif
#>>>
################################################################################

################################################################################

# Allow command-line arguments to come from file if not defined
ifneq "$(wildcard ${UNIT}.args)" ""
  ifndef RUNTIME_ARGS
    RUNTIME_ARGS := $(shell cat ${UNIT}.args)
  endif
endif

################################################################################
# Standard variables affecting compilation <<<
################################################################################
ifdef NDEBUG
  NDEBUG_SYSTEMC := 1
endif
ifeq "${PLATFORM}" "Darwin"
  ifndef CXX
  $(info DEBUG: using clang++)
    USING_CLANG := 1
    CPUWIDTH := 64
  endif
endif
ifeq (${USING_CLANG},1)
  CC  := clang
  CXX := clang++
endif
CXX_PGMS:=systemcc ${CXX} clang++ g++ c++
CXX_PGM:=$(call Find_executable,${CXX_PGMS})
$(info INFO: Using ${CXX_PGM} for compiling)
ifndef FIX_PGM
  FIX_PGM :=$(call Findbin,fixdeps)
endif
ifndef GDB_PGM
  GDB_PGM :=$(firstword $(wildcard /usr/bin/gdb /sw/bin/gdb $(call Find_executable,gdb)) gdb)
endif
ifndef DDD_PGM
  DDD_PGM :=$(firstword $(wildcard /usr/bin/ddd /sw/bin/ddd $(call Find_executable,ddd)) ddd)
endif
ifndef NOPEDANTIC
  CFLAGS += -pedantic -Wno-long-long
endif
ifdef WORKLIB
  HAS_SHARED := 1
endif
ifdef HAS_SHARED
  $(info INFO: Creating shared output)
  ifeq "${PLATFORM}" "Darwin"
    CFLAGS += -dynamic
  else
    CFLAGS += -shared
  endif
  CFLAGS += -fPIC
endif
ifndef CXXFLAGS
  CXXFLAGS := ${OTHER_CFLAGS}
endif

ifdef OPTIMIZE
  ifeq "${OPTIMIZE}" ""
    OPTLEVEL:=-O3
  else
    OPTLEVEL:=-O${OPTIMIZE}
  endif
else
  OPTLEVEL:=-O0
endif

ifdef VISTA_HOME
  CXX     := ${VISTA_HOME}/${TARGET_ARCH}32/tools/bin/g++
  CC      := ${VISTA_HOME}/${TARGET_ARCH}32/tools/bin/g++
  VISTACC := vista_c++ -sc201 -gcc34
  LD      :=  ${VISTACC}
endif
ifndef CC
  CC := gcc
endif
ifndef NDEBUG
  CFLAGS   += -ggdb
endif
ifdef GPROF
  CFLAGS += -pg
  OPTLEVEL:=-O0
endif
ifdef GCOV
  CFLAGS += -fprofile-arcs -ftest-coverage
  OPTLEVEL:=-O3
endif
CFLAGS += -Wno-deprecated
CFLAGS += ${OPTLEVEL}

# Allow user overrides to go first
LDFLAGS := ${OTHER_LDFLAGS} ${MY_LDFLAGS}
INCDIRS := . ../include ../src ${SHARED_INCS} ${MY_INCDIRS} ${OTHER_INCDIRS}
C_DEFS  +=      ${HLDW_DEFS}
LIBDIRS := .  ${OTHER_LIBDIRS} ${MY_LIBDIRS}
LIBS    :=      ${OTHER_LIBS} ${MY_LIBS}
tmp:=$(wildcard ./include)
CXX11   :=

CC_CMD  := ${CC} 
CXX_CMD := ${CXX}
LD_CMD  := ${CXX}

ifeq (${USING_WXWIDGETS},1)
  CXXFLAGS += $(shell wx-config --cppflags) -Wno-long-long
  LDFLAGS  += $(shell wx-config --libs)
endif

ifdef HAS_SHARED
  LDFLAGS += -shared
endif
ifneq "" "${tmp}"
  INCDIRS += ${tmp}
endif
tmp:=$(firstword $(wildcard ../include))
ifneq "" "${tmp}"
  INCDIRS += ${tmp}
endif
tmp:=$(firstword $(wildcard ../lib-${TARGET_ARCH}))
ifneq "" "$(wildcard ${tmp})"
  LIBDIRS += ${tmp}
endif
ifdef HLDW
  ifeq (${USING_SYSTEMC},1)
   ifeq (${USING_HLDW},1)
     ifndef NOHLDW
      INCDIRS += ${HLDW}/include
      LIBDIRS += ${HLDW}/lib-${TARGET_ARCH}
      ifdef NC_SYSTEMC
        LIBS    += -l${EA}-${SYSTEMC_FULL}-cds
      else
       ifdef VSIMSACFG
        LIBS    += -l${EA}-${SYSTEMC_FULL}-aldec
       else
        LIBS    += -l${EA}-${SYSTEMC_FULL}-osci
       endif
      endif
     endif
   endif
  endif
endif
ifdef M
  CPUWIDTH:=$M
endif
ifeq "${TARGET_ARCH}" "linux64"
  CPUWIDTH:=64
endif
ifeq "${TARGET_ARCH}" "macosx64"
  CPUWIDTH:=64
endif
ifndef CPUWIDTH
  CPUWIDTH:=32
  $(info INFO: Defaulting to 32 bits)
endif

ifdef NDEBUG
  C_DEFS += -DNDEBUG
endif
ifdef NDEBUG_SYSTEMC
  C_DEFS += -DNDEBUG_SYSTEMC
endif
ifeq (${USING_BOOST},1)
  # Remove old style -l
  BOOST_LIBS:=$(patsubst -l%,%,${BOOST_LIBS})
  $(call Report_debug,BOOST_LIBS)
  $(call Report_debug,BOOST_LDIR)
  INCDIRS += ${BOOST_HOME}/include
  LIBDIRS += ${BOOST_LDIR}
  # Add -l back in for each library iff it exists
  LIBS    += $(addprefix -l,$(foreach lib,${BOOST_LIBS},$(patsubst libb%.a,b%,$(notdir $(wildcard ${BOOST_LDIR}/lib*${lib}*.a)))))
  $(call Report_debug,LIBS)
endif
ifeq (${USING_BLITZ},1)
  INCDIRS += ${BLITZ_HOME}/include
  LIBDIRS += ${BLITZ_HOME/lib}
  LIBS    += -lblitz
endif
ifeq (${USING_SYSTEMC},1)
  ifdef SYSTEMC
    C_DEFS += -DUSING_SYSTEMC=1
    ifdef SYSTEMC_VERSION
      C_DEFS += -D${SYSTEMC_VERSION}
    endif
    ifdef SYSTEMC_VERSION_INT
      C_DEFS += -DSYSTEMC_VERS=${SYSTEMC_VERSION_INT}
    endif
    ifndef NDEBUG_SYSTEMC
      C_DEFS += -DDEBUG_SYSTEMC
    else
  $(info INFO: Turning off DEBUG_SYSTEMC)
    endif
    SYSTEMC_LIB:=$(firstword $(wildcard ${SYSTEMC}/lib-${TARGET_ARCH} ${SYSTEMC}/lib))
    ifeq "${SYSTEMC_LIB}" ""
      $(error Missing SystemC library ${SYSTEMC}/lib-${TARGET_ARCH})
    endif
    INCDIRS  += $(call Require_real,${SYSTEMC}/include)
    LIBDIRS  += ${SYSTEMC_LIB}
    LIBS     += -lsystemc
    # Support some EDA tools
    export SYSTEMC_HOME:=${SYSTEMC}
    # Forte support
    ifdef CYNTH_HOME
      INCDIRS += ${CYNTH_HOME}/include
    endif
  endif
endif
ifdef DOULOS
  $(info INFO: Using Doulos checkers)
  USING_DOULOS:=1
  INCDIRS += ${DOULOS}/include
endif
ifeq "${TARGET_ARCH}" "macosx64"
  CPUWIDTH:=64
  CXX_CMD += -arch x86_64
endif
ifeq (${USING_FX},1)
  C_DEFS += -DSC_INCLUDE_FX
endif
ifeq (${USING_DYNAMIC},1)
  C_DEFS += -DSC_INCLUDE_DYNAMIC_PROCESSES
endif
ifeq (${USING_CXX11},1)
  CXX11 += -std=c++11
  LIBS  += $(if ${USING_CLANG},-stdlib=libc++,)
endif
CC_CMD  += -m${CPUWIDTH}
CXX_CMD += -m${CPUWIDTH}
LD_CMD  += -m${CPUWIDTH}
C_DEFS  += -DW${CPUWIDTH}
$(info Using ${CPUWIDTH}-bit architecture)
ifeq (${USING_SCV},1)
  ifdef SYSTEMC_SCV
    ifneq "${SYSTEMC}" "$(SYSTEMC_SCV)"
      INCDIRS += ${SYSTEMC_SCV}/include
      LIBDIRS += $(firstword $(wildcard ${SYSTEMC_SCV}/lib-${TARGET_ARCH} ${SYSTEMC_SCV}/lib))
    endif
  endif
  LIBS   += -lscv
endif
ifeq (${USING_TLM},1)
  ifdef TLM_HOME
    ifndef SYSTEMC_TLM
      SYSTEMC_TLM:=${TLM_HOME}
    endif
  endif
  ifdef SYSTEMC_TLM
    INCDIRS += ${SYSTEMC_TLM}/include/tlm
  endif
endif
# Allow for other extensions
LDFLAGS += ${BDW_EXTRA_LDFLAGS}

# Allow user to override
ifdef OTHER_DEFS
C_DEFS    += ${OTHER_DEFS}
endif

$(call Report_debug,INCDIRS LIBDIRS LIBS)
# Fixup
INCDIRS := $(call Prefix_files,-I,${INCDIRS})
LIBDIRS := $(call Prefix_files,-L,${LIBDIRS})

INCDIRS := $(patsubst -I-I%,-I%,${INCDIRS})
LIBDIRS := $(patsubst -L-L%,-L%,${LIBDIRS})

INCDIRS := $(call Unique,${INCDIRS})
LIBDIRS := $(call Unique,${LIBDIRS})
C_DEFS  := $(call Unique,${C_DEFS})
LIBS    := $(call Unique,${LIBS})
OBJS    := $(call Unique,${OBJS})

$(call Report_debug,INCDIRS LIBDIRS LIBS)
FLAGS:=${CXXFLAGS} ${CFLAGS} ${OTHER_CFLAGS} ${PLUSFLAGS}

ifndef EXE
  ifndef HAS_SHARED
    EXE := $(strip ${UNIT})-${TARGET_ARCH}.x
  else
    EXE := $(strip ${UNIT}).so
  endif
endif
#>>>
################################################################################
.SUFFIXES: .cc .cpp .o .x

DFLT?=exe

default_target: version ${DFLT}

$(info INFO: C_DEFS=$(C_DEFS))
$(info INFO: INCDIRS=$(INCDIRS))

version:
	@echo "INFO: GCC version " `${GCC_VERSION_PGM}`;
ifdef SYSTEMC_VERSION
	@echo -n "INFO: SystemC version "; ${SYSTEMC_VERSION_PGM};
endif
	@${RULER};

envv:
	@echo "MAKEFILE_RULES = ${MAKEFILE_RULES}"

help:
ifdef MESSAGE
	@clear; ${RULER};\
	 echo "${MESSAGE}"; \
	 ${RULER}; \
	 REPLY="?";\
         while [[ "$$REPLY" != "q" && "$$REPLY" != "h" ]]; do \
           read -n 1 -p "(Press Q to quit or H for help)"; echo ""; \
           REPLY=`echo "$$REPLY" | tr /A-Z/a-z/`; \
           if [[ "$$REPLY" == "h" || "$$REPLY" == "H" ]]; then \
             perldoc ${MAKEFILE_RULES};\
           fi \
         done
else
	@perldoc ${MAKEFILE_RULES}
endif

################################################################################
# 'show' rule displays internal variables for debug purposes <<<
show:
	@header WHAT
	@${RULER};
	@echo "User specified:";
	@echo "  DFLT='${DFLT}'";
	@echo "  UNIT='${UNIT}'";
	@echo "  SRCS='${SRCS}'";
	@echo "  HDRS='${HDRS}'";
	@echo "  MAKEFILE_LIST='${MAKEFILE_LIST}'";
	@${RULER};
	@echo "Environment/discovered:";
	@echo "  HLDW='${HLDW}'";
	@echo "  SYSTEMC='${SYSTEMC}'";
	@echo "  SYSTEMC_SCV='${SYSTEMC_SCV}'";
	@echo "  SYSTEMC_TLM='${SYSTEMC_TLM}'";
	@echo "  BOOST='${BOOST}'";
#ifdef BMAKEFILE
	@${RULER};
	@echo "bmake:";
	@echo "  BMAKE='${BMAKE}'";
	@echo "  BMAKEFILE='${BMAKEFILE}'";
	@echo "  PLUSOPTS='${PLUSOPTS}'";
	@echo "  PLUSARGS='${PLUSARGS}'";
	@echo "  PLUSDEFINES='${PLUSDEFINES}'";
	@echo "  PLUSFLAGS='${PLUSFLAGS}'";
#endif BMAKEFILE
	@${RULER};
	@echo "Computed:";
	@echo "  INCDIRS='${INCDIRS}'";
	@echo "  C_DEFS='${C_DEFS}'";
	@echo "  OBJS='${OBJS}'";
	@echo "  SHARED_OBJS='${SHARED_OBJS}'";
	@echo "  LIBDIRS='${LIBDIRS}'";
	@echo "  LIBS='${LIBS}'";
	@echo "  CXX='${CXX}'";
	@echo "  CXXFLAGS='${CXXFLAGS}'";
	@echo "  CFLAGS='${CFLAGS}'";
	@echo "  RUNTIME_ARGS='${RUNTIME_ARGS}'";
	@echo "  EXE='${EXE}'";
	@${RULER}
#>>>

debug: exe
	@echo 'printf "Begin ${UNIT}.gdb"'                      >${UNIT}.gdb;\
	 test -r ~/.gdbinit && echo 'source ~/.gdbinit'        >>${UNIT}.gdb;\
	 test -r .gdbinit && echo 'source .gdbinit'            >>${UNIT}.gdb;\
	 echo 'set args ${RUNTIME_ARGS}'                       >>${UNIT}.gdb;
ifdef BREAKPOINTS
	@for bp in $(call Unique,sc_main ${BREAKPOINTS}); do \
           echo "break $$bp" >>${UNIT}.gdb;\
           echo 'commands'                                     >>${UNIT}.gdb;\
           echo '  printf " ***'$$bp'\\n"'                     >>${UNIT}.gdb;\
           echo 'end'                                          >>${UNIT}.gdb;\
           done
endif
	@echo 'break main'                                     >>${UNIT}.gdb;\
	 echo 'run'                                            >>${UNIT}.gdb;\
	 echo 'printf "End ${UNIT}.gdb"'                       >>${UNIT}.gdb;
	${GDB_PGM} -nx -x ${UNIT}.gdb ${EXE}

gdb: exe
	${GDB_PGM} ${EXE}

ddd: exe
	@echo "set args ${RUNTIME_ARGS}"  >${UNIT}.gdb;
ifdef BREAKPOINTS
	@for bp in ${BREAKPOINTS}; do echo "break $$bp" >>${UNIT}.gdb;
endif
	@echo "break sc_main"  >>${UNIT}.gdb;
	@echo "run"  >>${UNIT}.gdb;
	@-rm -f .gdbinit; ln -s ${UNIT}.gdb .gdbinit
	${DDD_PGM} ${EXE}

sim:        run
simulation: run

runbg: ${EXE}
        # Simple background execution
	@echo "${EXE} ${RUNTIME_ARGS}"
	@-time ./${EXE} ${RUN_TIME_ARGS} &

noscr: noscript
noscript:
	${MAKE} NOSCRIPT=1 run
ifdef NOSCRIPT
  SCRIPT:=""
else
  export EXE
  export UNIT
  export TARGET_ARCH
  SCRIPT=./${UNIT}.scr
endif
LDLIB:=$(call Env,LD_LIBRARY_PATH,${SYSTEMC}/lib-${TARGET_ARCH})
RUNTIME_ERRORS:="$(BOLD)$(CRED)ALERT: Simulation had runtime errors$(NONE)"
run: ${EXE}
	@${RULER};
	@echo "RUNNING SIMULATION";
	@${RULER}
ifndef NORUN
	@${RULER};
 ifneq "$(wildcard ${SCRIPT})" ""
	@echo "$(wildcard ./${SCRIPT}) ${RUNTIME_ARGS}"
	@-time ./$(wildcard ./${SCRIPT}) ${RUNTIME_ARGS}\
        || echo $(RUNTIME_ERRORS)
 else
 ifdef VISTA_HOME
  ifneq "$(wildcard ./${UNIT}_rcfg.xml)" ""
        # Execution with a run-time configuration
	@echo "vista -exec ${EXE} --rcfg ./${UNIT}_rcfg.xml ${RUNTIME_ARGS}"
	@-time vista -exec ./${EXE} --rcfg ./${UNIT}_rcfg.xml ${RUN_TIME_ARGS}\
        || echo $(RUNTIME_ERRORS)
  else
  ifneq "$(wildcard ./${UNIT}.dat)" ""
        # Execute streaming a data file into STDIN
	@echo "vista -exec ${EXE} ${RUNTIME_ARGS} < $(wildcard ./${UNIT}.dat)"
	@-time vista -exec ./${EXE} ${RUN_TIME_ARGS} < $(wildcard ./${UNIT}.dat)\
	|| echo $(RUNTIME_ERRORS)
  else
        # Simple execution
	@echo "vista -exec ${EXE} ${RUNTIME_ARGS}"
	@-time vista -exec ./${EXE} ${RUN_TIME_ARGS}\
        || echo $(RUNTIME_ERRORS)
  endif
  endif
 else
  ifneq "$(wildcard ./${UNIT}_rcfg.xml)" ""
        # Execution with a run-time configuration
	@echo "${EXE} --rcfg ./${UNIT}_rcfg.xml ${RUNTIME_ARGS}"
	@-time ./${EXE} --rcfg ./${UNIT}_rcfg.xml ${RUNTIME_ARGS}\
        || echo $(RUNTIME_ERRORS)
  else
  ifneq "$(wildcard ./${UNIT}.dat)" ""
        # Execute streaming a data file into STDIN
	@echo "${EXE} ${RUNTIME_ARGS} < $(wildcard ./${UNIT}.dat)"
	@-time ./${EXE} ${RUNTIME_ARGS} < $(wildcard ./${UNIT}.dat)\
	|| echo $(RUNTIME_ERRORS)
  else
        # Simple execution
	@echo "${EXE} ${RUNTIME_ARGS}"
	@-time ./${EXE} ${RUNTIME_ARGS}\
        || echo $(RUNTIME_ERRORS)
  endif
  endif
  endif
 endif
else
	@echo "INFO: Executable is ready (NORUN was specified)";
endif
	@${RULER}

compile obj objs: deps $(if ${LIBMBRS},${LIBOBJS} ${LIBMBRS}) ${SHARED_OBJS} ${OBJS}

lib: deps ${LIBPATH}

link: exe
exe: deps $(if ${LIBMBRS},${LIBOBJS} ${LIBMBRS}) ${EXE}

work: ${WORKLIB}

rmdeps:
	-rm -f ${DEPENDENCIES_FILE}

deps: rmdeps ${DEPENDENCIES_FILE}

################################################################################
#
#      #                                         
#     # #               ##                       
#    #   #               #                       
#   #     # ####   ###   #   #   # ######  ###   
#   ####### #   # #   #  #    # #     ##  #####  
#   #     # #   # #  ##  #     #    ##    #      
#   #     # #   #  ## # ###    #   ######  ###   
#  
################################################################################
# Profiling (time, memory, coverage)
################################################################################
ifndef GPROF
gprof:
	${MAKE} gprof GPROF=
else
gprof: run
	gprof ${GPROF} ${EXE} gmon.out
endif
ifndef GCOV
gcov:
	${MAKE} gcov GCOV="-fprofilearcs -ftest-coverage"
else
gcov: run
	gcov ${GCOV}
endif
ifndef MEMLEAK
memleak:
	${MAKE} memleak MEMLEAK=
else
memleak: run
	memleak ${MEMLEAK}
endif

################################################################################
#  
#    ####                                        ##       #                  
#   #    #                        ##            #  #      #             #    
#   #                          #   #             ##       #     #       #    
#   #       ###  ### ##  ###       #   ###      ###       #        ###  #    
#   #      #   # #  #  # #  # ##   #  #####    #   # #    #    ##  #  # #  # 
#   #    # #   # #  #  # ###   #   #  #        #    #     #     #  #  # ###  
#    ####   ###  #  #  # #    ### ###  ###      ###  #    #### ### #  # #  # 
#  
################################################################################
# Compilation
################################################################################
# Link
define LINK
(${SETUP}\
${LD_CMD} ${LIBDIRS} -o $1 $2 ${LDFLAGS} ${LIBS} 2>&1 | c++filt ) | tee link.log
endef
${EXE}: ${SHARED_OBJS} ${OBJS} ${OTHER_OBJS}
	@${RULER}
	@echo "LINK TO CREATE EXECUTABLE";
	@${RULER}
	@-rm -fr ${EXE}
	@$(call REPORT_TITLE,Linking $@);
	@touch FAILED_TO_LINK.$(@F)
	$(strip $(call LINK,$@,${SHARED_OBJS} ${OBJS} ${OTHER_OBJS})) 
	@test -x ${EXE}
	@rm FAILED_TO_LINK.$(@F)

ifdef WORKLIB
${WORKLIB}: ${SHARED_OBJS} ${OBJS} ${OTHER_OBJS}
	@${RULER}
	@echo "LINK TO CREATE SHARED LIBRARY";
	@${RULER}
	@-rm -fr ${WORKLIB}
	@echo "INFO: Linking $@";
	@touch FAILED_TO_LINK.$(@F)
	$(strip $(call LINK,$@,${SHARED_OBJS} ${OBJS} ${OTHER_OBJS})) 
	@test -r ${WORKLIB}
	@rm FAILED_TO_LINK.$(@F)
endif

ifneq "$(findstring systemcc,${CXX_PGM})" ""
  $(info INFO: Using SYSTEMCC)
  define SYSTEMCC
    (${CXX_PGM} -cd $1 $2 $3) 2>&1 | tee compile.log
  endef
else
  $(info INFO: Default ${CXX})
  log:=/tmp/log.$(PID)
  xit:=/tmp/xit.$(PID)
  define SYSTEMCC
    (cd $1 && $2 $3 2>&1) | tee compile.log
  endef
endif

# Compile C++
%${OBJFLAVOR}.o: %.cpp
	@${RULER}; $(call REPORT_TITLE,Compiling $<);
	@-rm -f $@
	@touch FAILED_TO_COMPILE.$(<F)
	${SETUP} $(call SYSTEMCC,$(<D),${CXX_CMD} ${CXX11},$(strip ${FLAGS} ${INCDIRS} ${C_DEFS} -o $(@F) -c $(<F)))
	@mv compile.log FAILED_TO_COMPILE.$(<F)
	@grep error: FAILED_TO_COMPILE.$(<F) >/dev/null 2>&1 || rm FAILED_TO_COMPILE.$(<F)
	@test ! -r FAILED_TO_COMPILE.$(<F)

# Compile C++
%${OBJFLAVOR}.o: %.cxx
	@${RULER}; $(call REPORT_TITLE,Compiling $<);
	@-rm -f $@
	@touch FAILED_TO_COMPILE.$(<F)
	${SETUP} $(call SYSTEMCC,$(<D),${CXX_CMD} ${CXX11},$(strip ${FLAGS} ${INCDIRS} ${C_DEFS} -o  $(@F) -c $(<F)))
	@grep error: FAILED_TO_COMPILE.$(<F) >/dev/null 2>&1 || rm FAILED_TO_COMPILE.$(<F)
	@test ! -r FAILED_TO_COMPILE.$(<F)

# Compile C++
%${OBJFLAVOR}.o: %.cc
	@${RULER}; $(call REPORT_TITLE,Compiling $<);
	@-rm -f $@
	@touch FAILED_TO_COMPILE.$(<F)
	${SETUP} $(call SYSTEMCC,$(<D),${CXX_CMD} ${CXX11},$(strip ${FLAGS} ${INCDIRS} ${C_DEFS} -o $(@F) -c $(<F)))
	@grep error: FAILED_TO_COMPILE.$(<F) >/dev/null 2>&1 || rm FAILED_TO_COMPILE.$(<F)
	@test ! -r FAILED_TO_COMPILE.$(<F)

# Compile vanilla C if requested
%${OBJFLAVOR}.o: %.c
	@${RULER}; $(call REPORT_TITLE,Vanilla C code - Compiling $<);
	@-rm -f $@
	@touch FAILED_TO_COMPILE.$(<F)
	${SETUP} $(call SYSTEMCC,$(<D),${CC_CMD},$(strip ${CFLAGS} ${INCDIRS} ${C_DEFS} -o $(@F) -c $(<F)))
	@grep error: FAILED_TO_COMPILE.$(<F) >/dev/null 2>&1 || rm FAILED_TO_COMPILE.$(<F)
	@test ! -r FAILED_TO_COMPILE.$(<F)

################################################################################
#  
#   #     ### #####  #####     #    #####  #     # 
#   #      #  #    # #    #   # #   #    #  #   #  
#   #      #  #    # #    #  #   #  #    #   # #   
#   #      #  #####  #####  #     # #####     #    
#   #      #  #    # #  #   ####### #  #      #    
#   #      #  #    # #   #  #     # #   #     #    
#   ##### ### #####  #    # #     # #    #    #    
#  
################################################################################
# Library maintenance
################################################################################
TARGET_HEADERS:=$(addprefix ${INCDIR}/,$(notdir ${HEADERS}))
headers:
ifeq (${USING_CLEARCASE},1)
#------------------------------------------------------------------------------
# Create links to headers.
#
# NOTE: This fails without notice if the headers are checked out.
# NOTE: The relative path logic makes all kinds of assumptions.
#
	-cleartool co -nc ${INCDIR}
	for o in $(wildcard ${TARGET_HEADERS}); do cleartool rm $${o}; done
	for t in ${HEADERS}; do cleartool ln -s ../`cleartool ls -d -short $${t} | cut -d"/" -f4-` ${INCDIR}/`basename $${t}`; done
endif

${LIBPATH}: ${OBJS}
	@$(call REPORT_TITLE,Archiving $(notdir $@));
	mkdir -p ${LIBDIR}
ifeq (${USING_CLEARCASE},1)
# We need to checkout if not already
	-cleartool ls $@ | grep -q CHECKEDOUT || cleartool co -nc $@
endif
	ar -rcs $@ $(filter-out %_tb.o,${OBJS})
	ranlib $@

${LIBPATH}(%.o): %.o
	@$(call REPORT_TITLE,Updating $(notdir $@));
	mkdir -p ${LIBDIR}
ifeq (${USING_CLEARCASE},1)
# We need to checkout if not already
	-cleartool ls $@ | grep -q CHECKEDOUT || cleartool co -nc ${LIBPATH}
endif
	ar -rcs ${LIBPATH} $<
	ranlib ${LIBPATH}

################################################################################
# Housekeeping
################################################################################
TARBALL:=${UNIT}.tgz
TARLIST=$(call Unique,\
  $(wildcard README* LICENSE* GITHEAD CHANGELOG* NOTES* INSTALL* ?akefile docs etc)\
  ${HDRS}\
  ${SRCS}\
  $(wildcard $(OTHER_TAR))\
  $(wildcard ${SCRIPT} ${UNIT}.dat)\
  )
tar:
	@test -e ${UNIT} || ln -s . ${UNIT}; # create link if non-existant
	@$(call Mkdir,${UNIT}/etc)
	@$(call Mkln,${MAKEFILE_RULES},${UNIT}/etc/$(notdir ${MAKEFILE_RULES}))
	@$(call Mkln,${MAKEFILE_MACROS},${UNIT}/etc/$(notdir ${MAKEFILE_MACROS}))
	@$(call Mkln,${HLDW}/bin,)
	@echo "git version " >GITHEAD && git rev-parse HEAD 2>/dev/null >>GITHEAD || rm -f GITHEAD
	tar cvhzf ${TARBALL} $(addprefix ${UNIT}/,${TARLIST}) >MANIFEST.txt 2>&1
	@rm ${UNIT}
	@echo "Created ${TARBALL}"

ifdef INSTALL
INSTALL_DIR:=$(dir ${INSTALL})
INSTALL_LIST:=$(notdir ${INSTALL})
endif
ifndef INSTALL_DIR
INSTALL_DIR := ${HLDW}/bin
endif
ifndef INSTALL_LIST
INSTALL_LIST:=${EXE}
endif
install: ${INSTALL_LIST}
	@echo ""
	mkdir -p ${INSTALL_DIR} &&\
	rsync -auvP $(call Require_real,${INSTALL_LIST}) ${INSTALL_DIR}/

dist:
# Install/update local copies of makefiles and other links
	mkdir -p etc
	rsync -auvLP ./links/ ./etc/
ifdef HLDW
# Install/update local copies of scripts
	mkdir -p bin
	HERE=`pwd`;cd ${HLDW}/bin && rsync -auvP ${MAKEFILE_SCRIPTS} $$HERE/bin/
endif

rmdist: distclean
	-rm -fv ${RULES}

sweep: clean

clean:
	@${RULER}; $(call REPORT_TITLE,Cleaning ${PWD});
	rm -f ${SHARED_OBJS} ${OBJS} ${DEPENDENCIES_FILE}
	rm -f *~ ${EXE} core link.log

ultraclean: clean
	@echo "Ultra cleaning...";
	rm -rf Makefile.prj *.vcd *.vcd.vpd *.awif *.ow vcd_autosave.sav
	rm -rf $(filter-out bmake% run_test% vc2%,$(wildcard *.log))

distclean: ultraclean
	@echo "Distribution clean...";
	rm -rf *.log

################################################################################
# Documentation
################################################################################
html: html/index.html

lns:
	@$(call REPORT_TITLE,Putting symbolic links in place...)
ifdef TOOL
	for tool in ${TOOL}; do\
          ln -s ../bin/$$tool $$tool.pod;\
        done
else
	for file in ../include/*.h ../src/*.cpp; do\
          ln -s $$file;\
        done
endif

pdf: lns $(addsuffix .pdf,${TOOL})

Doxyfile:
	doxygen -g

html/index.html: ${SRCS} Doxyfile
	doxygen $*.cpp

%.chk: %.pod
	podchecker $*.pod >$*.chk 2>&1

%.pdf: %.chk
	TITLE=`podtitle $*.pod`;\
	pod2pdf \
          --title "$$TITLE"\
          --author 'Doulos.'\
          --header 'User Manual'\
                $*.pod
	mv $*.pod.pdf $*.pdf

M:=1
man$M/%.$M: %.chk Makefile
	@mkdir -p man$M
	TITLE=`podtitle $*.pod`;\
	pod2man\
          --name "$$TITLE"\
          --section=$M\
          --center="Doulos."\
          $*.pod >man$M/$*.$M

################################################################################
# Mac specific
################################################################################
NewMacApp:
	new plist   Info
	new plist   version
	new strings InfoPlist
	new macicns ${UNIT}

${UNIT}.app: Info.plist ${UNIT} version.plist InfoPlist.strings ${UNIT}MacIcons.icns AnotherResource.txt  
	-mkdir ${UNIT}.app    
	-mkdir ${UNIT}.app/Contents
	-mkdir ${UNIT}.app/Contents/MacOS
	-mkdir ${UNIT}.app/Contents/Resources
	-mkdir ${UNIT}.app/Contents/Resources/English.lproj
	cp Info.plist ${UNIT}.app/Contents/
	cp version.plist ${UNIT}.app/Contents/
	cp InfoPlist.strings ${UNIT}.app/Contents/Resources/English.lproj/
	echo -n 'APPL????' > ${UNIT}.app/Contents/PkgInfo
	cp ${UNIT} ${UNIT}.app/Contents/MacOS/${UNIT}
	cp ${UNIT}MacIcons.icns AnotherResource.txt ${UNIT}.app/Contents/Resources/

################################################################################
# Following is for internal use only
ifdef FUNC
FUNCS:=${FUNC}
endif
ifndef FUNCS
FUNCS:=Get_dirs Get_notdirs
endif
ifndef ARGV
ARGV:=$(wildcard *)
endif
selftest:
	@$(foreach func,${FUNCS},echo "${func}(${ARGV})=$(call ${func},${ARGV})";)

################################################################################
# Dependencies
################################################################################

${DEPENDENCIES_FILE}: $(wildcard ${SHARED_SRCS} ${SRCS})
	@${RULER}; $(call REPORT_TITLE,Computing dependencies);
	${SETUP} ${CXX_CMD} ${CXX11} ${FLAGS} ${INCDIRS} ${C_DEFS} -MM $(wildcard ${SHARED_SRCS} ${SRCS}) > ${DEPENDENCIES_FILE}
ifndef NOFIXDEPS
  ifneq "$(findstring fixdeps,${FIX_PGM})" ""
    ifdef OBJFLAVOR
	fixdeps -flavor ${OBJFLAVOR} ${DEPENDENCIES_FILE}
    else
	fixdeps ${DEPENDENCIES_FILE}
    endif
  endif
endif

-include ${DEPENDENCIES_FILE}

else
$(warning ${MAKEFILE_RULES} already included)
endif
# COPYRIGHT (C) 2012 David C Black
#-------------------------------------------------------------------------------
#END $File$
