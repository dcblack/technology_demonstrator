# CMND: bmake exe
-- INK = . .. ../.. ../../.. /home2/dcblack
-- MKF = Bmakefile bmakefile GNUmakefile makefile Makefile
eval `envv set PLUSDEFINES ' '`
eval `envv set PLUSFLAGS ' '`
/usr/bin/gmake -f ./makefile exe
INFO: [01;31mTargeting ZEDBOARD[00m
rm -f *.o *.x
[01;31m################################################################################[00m
INFO: Compiling random.c
arm-xilinx-eabi-gcc -static -D__ZEDBOARD -D__USE_GNU -D_POSIX_SOURCE -DSILENT -I/hd2/eda/xilinx/14.4/ISE_DS/EDK/gnu/arm/lin/arm-xilinx-linux-gnueabi/libc/usr/include -g -lpthread -std=c99 -c -o random.o random.c
[01;31m################################################################################[00m
INFO: Compiling creport.c
arm-xilinx-eabi-gcc -static -D__ZEDBOARD -D__USE_GNU -D_POSIX_SOURCE -DSILENT -I/hd2/eda/xilinx/14.4/ISE_DS/EDK/gnu/arm/lin/arm-xilinx-linux-gnueabi/libc/usr/include -g -lpthread -std=c99 -c -o creport.o creport.c
[01;31m################################################################################[00m
INFO: Compiling tlmx_packet.c
arm-xilinx-eabi-gcc -static -D__ZEDBOARD -D__USE_GNU -D_POSIX_SOURCE -DSILENT -I/hd2/eda/xilinx/14.4/ISE_DS/EDK/gnu/arm/lin/arm-xilinx-linux-gnueabi/libc/usr/include -g -lpthread -std=c99 -c -o tlmx_packet.o tlmx_packet.c
[01;31m################################################################################[00m
INFO: Compiling driver.c
arm-xilinx-eabi-gcc -static -D__ZEDBOARD -D__USE_GNU -D_POSIX_SOURCE -DSILENT -I/hd2/eda/xilinx/14.4/ISE_DS/EDK/gnu/arm/lin/arm-xilinx-linux-gnueabi/libc/usr/include -g -lpthread -std=c99 -c -o driver.o driver.c
driver.c: In function 'interrupt_server':
driver.c:132:5: warning: implicit declaration of function 'pthread_kill' [-Wimplicit-function-declaration]
[01;31m################################################################################[00m
INFO: Compiling software.c
arm-xilinx-eabi-gcc -static -D__ZEDBOARD -D__USE_GNU -D_POSIX_SOURCE -DSILENT -I/hd2/eda/xilinx/14.4/ISE_DS/EDK/gnu/arm/lin/arm-xilinx-linux-gnueabi/libc/usr/include -g -lpthread -std=c99 -c -o software.o software.c
[01;31m################################################################################[00m
INFO: Linking software.zed
arm-xilinx-eabi-gcc -o software.zed random.o creport.o tlmx_packet.o driver.o software.o random.h creport.h tlmx_packet.h driver.h -static -L/hd2/eda/xilinx/14.4/ISE_DS/EDK/gnu/arm/lin/arm-xilinx-linux-gnueabi/libc/usr/lib -lpthread -lc
driver.o: In function `dev_open':
/media/psf/Home/Dropbox/Doulos-Main/Papers/DVCON2013/DVCON2013-SystemC_Tutorial/Example/zynq/driver.c:170: warning: Using 'gethostbyname' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
libpthread.a(pthread_create.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(pthread_exit.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(pthread_self.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(pthread_mutex_lock.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(pthread_mutex_trylock.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(pthread_mutex_unlock.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(pthread_key_create.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(pthread_key_delete.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(pthread_getspecific.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(pthread_setspecific.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(pthread_kill.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(pthread_cancel.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(pthread_once.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(cleanup_compat.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(unwind.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(cancellation.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(lowlevellock.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(lowlevelrobustlock.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(ptw-sigsuspend.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(tpp.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(errno-loc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(nptl-init.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(vars.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(events.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libpthread.a(sigaction.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(libc-tls.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(errno.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(assert.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(ctype-info.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dcgettext.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dcigettext.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(finddomain.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(loadmsgcat.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(localealias.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(l10nflist.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(explodename.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(plural.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(plural-exp.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(hash-string.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(longjmp.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(jmp-unwind.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sigprocmask.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sigempty.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sigaddset.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sysv_signal.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(abort.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(bsearch.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(msort.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getenv.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(exit.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(cxa_atexit.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtol.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtoul.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtol_l.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtoul_l.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(grouping.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(snprintf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(asprintf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fxprintf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iofclose.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iofflush.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iofopen.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(vasprintf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(vsnprintf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fcloseall.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(libc_fatal.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iofgets_u.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wfileops.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fileops.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(genops.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(stdfiles.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(stdio.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strops.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(malloc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(morecore.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(thread-freeres.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strchr.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strdup.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strncmp.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strstr.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(memchr.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(memcmp.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(memset.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(mempcpy.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(stpcpy.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strcasecmp_l.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wordcopy.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(rawmemchr.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strchrnul.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(argz-count.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(argz-stringify.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wmempcpy.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wcsmbsload.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sleep.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(_exit.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sysconf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(get_child_max.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(environ.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fxstat64.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fcntl.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getcwd.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(have_o_cloexec.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getrlimit.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sbrk.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getpagesize.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getdtsz.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(syslog.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(tsearch.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getsysstats.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getclktck.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(init-misc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(llseek.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(have_sock_cloexec.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(alloca_cutoff.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(libc-cancellation.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(register-atfork.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(libc_pthread_init.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(libc_multiple_threads.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(inet_addr.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(res_libc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(vfprintf_chk.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(backtrace.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(backtracesymsfd.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(htons.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(inet_ntoa.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gethstbynm.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gethstbynm_r.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(nscd_gethst_r.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(nscd_helper.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-tls.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-execstack.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-support.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-addr.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(enbl-secure.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-profstub.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-sysdep.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(init-first.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gconv_open.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gconv.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gconv_close.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gconv_db.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gconv_conf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gconv_builtin.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gconv_simple.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gconv_trans.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gconv_cache.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gconv_dl.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(catnames.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(setlocale.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(findlocale.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(loadlocale.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(loadarchive.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C-ctype.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(SYS_libc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C_name.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(xlocale.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(global-locale.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(lc-ctype.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C-messages.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C-monetary.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C-numeric.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C-paper.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C-name.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C-address.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C-telephone.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C-measurement.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C-identification.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C-collate.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(localename.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(setfpucw.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fpu_control.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sigjmp.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(raise.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(qsort.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(setenv.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(secure-getenv.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(_itoa.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(itoa-digits.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(itoa-udigits.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(vfprintf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(printf_fp.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(reg-printf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(printf_fphex.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(reg-modifier.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(reg-type.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fprintf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dprintf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sscanf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(funlockfile.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(vfwprintf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(printf-parsemb.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(printf-parsewc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(filedoalloc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iofputs.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(ioftell.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iofwrite.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iogetdelim.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iogetline.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iopadn.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(ioseekoff.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iovsscanf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iofwide.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(memstream.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iovdprintf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iofputs_u.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wfiledoalloc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iowpadn.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wgenops.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strndup.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(_strerror.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strnlen.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strncpy.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strrchr.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(argz-ctsep.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(argz-addsep.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wmemcpy.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wmemset.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wcslen.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wmemmove.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(btowc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wcrtomb.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(mbsrtowcs.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wcsrtombs.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(mbsnrtowcs.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wcsnlen.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wcschrnul.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(mbsrtowcs_l.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(localtime.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(time.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(tzset.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(tzfile.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strftime_l.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(alt_digit.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(era.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(lc-time-cleanup.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(opendir.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(closedir.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(readdir.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(rewinddir.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getdents.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(readdir64.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fdopendir.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fork.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getpid.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getuid.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(geteuid.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getgid.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getegid.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(xstat.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(xstat64.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(lxstat64.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fxstatat64.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(openat.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(openat64.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(isatty.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(poll.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(xstatconv.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(tcgetattr.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(brk.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(readv.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(writev.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wctrans.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(towctrans.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(res_init.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(res_hconf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(nsswitch.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(hosts-lookup.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(digits_dots.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(readonly-area.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fortify_fail.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(inet_mkadr.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(herrno.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(if_index.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(ifaddrs.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(ifreq.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(nis_hash.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-load.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-cache.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-lookup.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-object.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-reloc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-error.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-debug.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-misc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-profile.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-origin.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-scope.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-libc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-tsd.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(C-time.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(lc-monetary.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(lc-numeric.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(s_isinf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(s_isnan.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(s_signbit.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(cmp.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(divrem.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(lshift.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(rshift.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(mul.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(mul_1.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(mul_n.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sub_n.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(submul_1.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dbl2mpn.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fpioconst.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(_itowa.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(itowa-digits.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(vfscanf.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getline.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(errlist.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fileno.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(fseek.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(ftello.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(iofread_u.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sdlerror.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sdladdr.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sdladdr1.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sdlinfo.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sdlmopen.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strerror.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strcasecmp.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strncase.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strsep.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(wcschr.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(mbrlen.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(mbrtowc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(offtime.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(mktime.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(getdents64.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(gethostname.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(opensock.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(profil.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(prof-freq.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(inet_pton.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-runtime.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-open.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-close.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(tlsdesc.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(add_n.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(addmul_1.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtoll.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtoull.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtoll_l.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtoull_l.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtof.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtod.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtold.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtof_l.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtod_l.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strtold_l.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(tens_in_limb.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sdlopen.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sdlclose.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sdlsym.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(sdlvsym.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strpbrk.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(strncase_l.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-deps.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-init.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-fini.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-version.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(dl-sym.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(mpn2flt.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
libc.a(mpn2dbl.o) uses 32-bit enums yet the output is to use variable-size enums; use of enum values across objects may fail
./arm-xilinx-eabi/bin/ld: warning: cannot find entry symbol _start; defaulting to 00008020
[01;31m################################################################################[00m
INFO: Done
